
   
     model {
    
     #############################################################
    #                                                           #
    #                  Biological process                       #
    #                                                           #
    #############################################################
    
    
       # Site Occupancy Dynamics (Priors)
    
       # intercept
       # gamma
       gamma.d ~ dunif(0,1)
       intercept.gamma <- logit(gamma.d)
          
       # phi
       phi.d ~ dunif(0,1)
       intercept.phi <- logit(phi.d)
          
       # regression coefficients
          
      # ----------------------
      #     Gamma (origination)
      # ----------------------
      
      # elevation
      beta.gamma.elev ~ dnorm (mu.int.gamma,tau.mu.gamma)  
      mu.int.gamma ~ dnorm(0, 0.001)
      tau.mu.gamma <- 1/(sigma.int.gamma*sigma.int.gamma)
      sigma.int.gamma ~ dunif(0,10)
      
      # precipitation
      beta.gamma.prec ~ dnorm (mu.int.gamma.prec,tau.mu.gamma.prec)  
      mu.int.gamma.prec ~ dnorm(0, 0.001)
      tau.mu.gamma.prec <- 1/(sigma.int.gamma.prec*sigma.int.gamma.prec)
      sigma.int.gamma.prec ~ dunif(0,10)
      
      # temperature
      beta.gamma.temp ~ dnorm (mu.int.gamma.temp,tau.mu.gamma.temp)  
      mu.int.gamma.temp ~ dnorm(0, 0.001)
      tau.mu.gamma.temp <- 1/(sigma.int.gamma.temp*sigma.int.gamma.temp)
      sigma.int.gamma.temp ~ dunif(0,10)
      
      # latitude
      beta.gamma.lat ~ dnorm (mu.int.gamma.lat,tau.mu.gamma.lat)  
      mu.int.gamma.lat ~ dnorm(0, 0.001)
      tau.mu.gamma.lat <- 1/(sigma.int.gamma.lat*sigma.int.gamma.lat)
      sigma.int.gamma.lat ~ dunif(0,10)
      
      # ----------------------
      #     Phi (persistence)
      # ----------------------
      
      # precipitation
      beta.phi.prec ~ dnorm (mu.int,tau.mu)  
      mu.int ~ dnorm(0, 0.001)
      tau.mu <- 1/(sigma.int*sigma.int)
      sigma.int ~ dunif(0,10)
      
      # temperature
      beta.phi.temp ~ dnorm (mu.int.temp,tau.mu.temp)  
      mu.int.temp ~ dnorm(0, 0.001)
      tau.mu.temp <- 1/(sigma.int.temp*sigma.int.temp)
      sigma.int.temp ~ dunif(0,10)
      
      # latitude
      beta.phi.lat ~ dnorm (mu.int.lat,tau.mu.lat)  
      mu.int.lat ~ dnorm(0, 0.001)
      tau.mu.lat <- 1/(sigma.int.lat*sigma.int.lat)
      sigma.int.lat ~ dunif(0,10)
      
    
      ## set initial conditions
        ## priors for occupancy in time 1
        for (i in 1:nsites) {
        
            for (g in 1:ngen) {
         
              psi1[i,g]~dunif(0,1)#dbeta(a,b)
             
            }
         }
    
    # Specify the hyperparameters for the Beta distribution
    #a <- 10   # probability of success
    #b <- 90   # probability of failures
    
    
    ############      Model       #############
    
    
    for (i in 1:nsites) {
    
      for (g in 1:ngen) {
    
          z[i,1,g]~dbern(psi1[i,g]) # occupancy status initialization
    
              for (t in 2:nint){
            
               ### model dynamic parameters
                logit(gamma[i,t,g]) <-  intercept.gamma + 
                                        beta.gamma.elev*elevation[i,t]+
                                        beta.gamma.prec*precipitation[i,t]+
                                        beta.gamma.temp*temperature[i,t]+
                                        beta.gamma.lat*lat[i]
        
                logit(phi[i,t,g]) <-  intercept.phi + 
                                      beta.phi.prec*precipitation[i,t]+
                                      beta.phi.temp*temperature[i,t]+
                                      beta.phi.lat*lat[i]
        
                # model likelihood
                ### modeling dynamics conditional on previous time realized occurrence z
                muZ[i,t,g] <- z[i,t-1,g] *  phi[i,t,g] + ### if occupied, p of not getting extinct/persist in the next time
                          (1-z[i,t-1,g]) *  gamma[i,t,g] ###  if not occupied, p of originate in the next time
                
                # realized occurrence
		    z[i,t,g] ~ dbern(muZ[i,t,g])
    
        }#t
        
      } #g
    
    }#i
    
    #############################################################
    #                                                           #
    #         Observation process across formations             #
    #                                                           #
    #############################################################
    
    
    
        # Priors for detection probability
        
        ###  detection intercept
        alpha.p ~ dunif(0,1)
        intercept.p <- logit(alpha.p)
        
        # temp effect on detection
        beta.p.temp ~ dnorm (mu.p.temp,tau.mu.p.temp)  
        mu.p.temp ~ dnorm(0, 0.001)
        tau.mu.p.temp <- 1/(sigma.int.p.temp*sigma.int.p.temp)
        sigma.int.p.temp ~ dunif(0,10)
      
        # latitude effect on detection
        beta.p.lat ~ dnorm (mu.p.lat,tau.mu.p.lat)  
        mu.p.lat ~ dnorm(0, 0.001)
        tau.mu.p.lat <- 1/(sigma.int.p.lat*sigma.int.p.lat)
        sigma.int.p.lat ~ dunif(0,10)
      
      
        
        

     ############      Model       #############
     
     
     
     # observation submodel: detection probability based on depth and videos
     for (k in 1:nobs) { ## loop over observations
                            
               y [k] ~ dbern(muY[site[k],form[k],int[k],gen[k]])
               # detection conditional on true occurrence 
               muY [site[k],form[k],int[k],gen[k]] <- z[site[k],int[k],gen[k]] * p[k]
                         
               # model
               logit(p[k])<- intercept.p+
                              beta.p.temp*tempObs[k]+
                              beta.p.lat*latObs[k]
                
             }
      
    
    # -----------------------------------------------
    
    ## derived parameters
    # number of gen per interval
    for (t in 1:nint) {
        Ngen[t]<-sum(z[,t,])
    }
    
    ## number of genera per site
    for (i in 1:nsites) {
        Ngen_site[i]<-sum(z[i,,])
    }
    

    ## average persistence and origination
   #for (g in 1:ngen) {
   #  avphi[g] <- mean(phi[,2:nint,g])
   #  avgamma[g]<- mean(gamma[,2:nint,g])
   #}
   #
   ### turnover (proportional gain or loss)
   #for (t in 2:nint) {  
   #  
   #    propcH [t] <-(sum(z[,t,])-sum (z[,t-1,]))/sum(z[,t-1,]) 
   #  
   #}
    
    ## equilibrium occupancy (which gen decline or increase over time)
    #for (g in 1:ngen) {
    #
    #    psi.eq[g] <- mean(gamma[2:nint,g])/(mean(gamma[2:nint,g])+mean(1-phi[2:nint,g])) # Equilibrium occupancy
    #    #psi.eq[g] <- gamma[g]/(gamma[g]+(1-phi[g])) # Equilibrium occupancy
    #}
    #
    ## relative extinction rate (μ/λ; Rabosky 2018) of each time
    #for (t in 2:nint) { 
    # for (g in 1:ngen) {
    #
    #    #RER[g] <- (1-phi[g])/gamma[g]
    #    RER[t,g] <- (1-phi[t,g])/gamma[t,g]
    #
    #  }
	  #}
    #
    ## net diversification rate (r= μ - λ; Rabosky 2018) of each time
    #for (t in 2:nint) { 
    # for (g in 1:ngen) {
    #
    #    #R0[g] <- (1-phi[g])-gamma[g]
    #    R0[t,g] <- (1-phi[t,g])-gamma[t,g]
    #
     #}
    #}
    
        
    }## end of the model
    
    
    

    
    
