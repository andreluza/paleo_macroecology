
   
     model {
    
    
      #############################################################
      #                                                           #
      #                  Biological process                       #
      #                                                           #
      #############################################################
      
       # Site Occupancy Dynamics (Priors)
       
       
        # ----------------------
        #     Gamma (origination)
        # ----------------------
        # intercepts
        gamma.u ~ dunif(0,1) # range origination
        intercept.gamma <- logit(gamma.u) # intercept origination
        # regression coeff
        beta.gamma.prec ~ dnorm(0, 0.01)# precipitation
        beta.gamma.temp ~ dnorm(0, 0.01)# temperature
        beta.gamma.lat ~ dnorm(0,0.01) # latitude
        beta.gamma.area ~ dnorm(0,0.01) # area
     
        # ----------------------
        #     Phi (persistence)
        # ----------------------
        # intercepts
        phi.u ~ dunif(0,1) # range persistence
        intercept.phi <- logit(phi.u) # intercept persistence
        # regression coeff
        beta.phi.prec ~ dnorm(0, 0.01)# precipitation
        beta.phi.temp ~ dnorm(0, 0.01)# temperature
        beta.phi.lat ~ dnorm(0,0.01) # lat
        beta.phi.area ~ dnorm(0,0.01) # area
       
        ## set initial conditions for each genus
        psi1 ~ dunif(0,1)
           
       
           
       ############      Model       #############
       
       # model for phi and gamma
       ### model dynamic parameters
        
        for (t in 2:nint){
      
             # speciation
             logit(gamma[t]) <-  intercept.gamma + 
                                   beta.gamma.prec*precipitation[t]+
                                   beta.gamma.temp*temperature[t]+
                                   beta.gamma.area*area[t]
                                         
              # persistence
              logit(phi[t]) <-  intercept.phi + 
                                  beta.phi.prec*precipitation[t]+
                                  beta.phi.temp*temperature[t]+
                                  beta.phi.area*area[t]
                                                  
        }
       
                       
      # occupancy dynamics
       
        for (g in 1:ngen) {
         
            z[g,1]~dbern(psi1) # occupancy status initialization
      
                for (t in 2:nint){
              
                  # model likelihood
                  ### modeling dynamics conditional on previous time realized occurrence z
                  muZ[g,t] <- z[g,t-1] *  phi[t] + ### if occupied, p of not getting extinct/persist in the next time
                                (1-z[g,t-1]) *  gamma[t] ###  if not occupied, p of originate in the next time
                  
                 # realized occurrence
          		   z[g,t] ~ dbern(muZ[g,t])
              
          }#t
        
         
        
        } #g
  

  
    #############################################################
    #                                                           #
    #         Observation process across formations             #
    #                                                           #
    #############################################################
    
    ###  detection intercept
    # intercept    
    p.u ~ dunif(0,1) # range origination
    intercept.p <- logit(p.u) # intercept origination
    # regression coef
    beta.p.lat ~ dnorm(0,0.01)
    beta.p.range ~ dnorm(0,0.01)
    beta.p.time ~ dnorm(0,0.01)
    beta.p.temp ~ dnorm(0,0.01)
     
    # observation submodel
    for (g in 1:ngen) { ## loop over observations 
      
      for (t in 1:nint) { ## loop over observations 
    
          # p independent on the number of formations
          logit(p[g,t])<- intercept.p+
                          beta.p.lat*lat_obs[g]+
                          beta.p.range*range[g]+
                          beta.p.time*time[t]+
                          beta.p.temp*temp_obs[g]
            
            
          # observation
          # Specify the binomial observation model conditional on occupancy state
          y[g,t] ~ dbin(muY[g,t], nform[t])
          muY[g,t] <- z[g,t]*p[g,t]
                  
        }
      
    }
      
    # derived parameters
    for (t in 1:nint){
        SRexp[t] <- sum (z[,t])
      }
    
    
    }## end of the model
    
    
