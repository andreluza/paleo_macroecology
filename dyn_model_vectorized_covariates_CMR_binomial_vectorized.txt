
   
     model {
    
    
      #############################################################
      #                                                           #
      #                  Biological process                       #
      #                                                           #
      #############################################################
      
       # Site Occupancy Dynamics (Priors)
       
       for (k in 1:ntaxa) {
             # intercepts
             # gamma
             intercept.gamma[k] ~ dnorm(0, 0.001)
                
             # phi
             intercept.phi[k] ~ dnorm(0, 0.001)
                
                
            # ----------------------
            #     Gamma (origination)
            # ----------------------
            
            # regression coefficients
            beta.gamma.prec[k] ~ dnorm(0, 0.001)# precipitation
            beta.gamma.temp[k] ~ dnorm(0, 0.001)# temperature
            #beta.gamma.prec.sd ~ dnorm(0, 0.001)# precipitation
            #beta.gamma.temp.sd ~ dnorm(0, 0.001)# temperature
            
            # ----------------------
            #     Phi (persistence)
            # ----------------------
            beta.phi.prec[k] ~ dnorm(0, 0.001)# precipitation
            beta.phi.temp[k] ~ dnorm(0, 0.001)# temperature
            #beta.phi.prec.sd ~ dnorm(0, 0.001)# precipitation
            #beta.phi.temp.sd ~ dnorm(0, 0.001)# temperature
            
            
           ## set initial conditions for each genus
           psi1[k] ~ dunif(0,1)
           
       }
    ############      Model       #############
   
   # model for phi and gamma
   ### model dynamic parameters
   for (k in 1:ntaxa) {
    
    for (t in 2:nint){
  
         # speciation
         logit(gamma[k,t]) <-  intercept.gamma[k] + 
                                     beta.gamma.prec[k]*precipitation[t]+
                                     beta.gamma.temp[k]*temperature[t]
                                     
          # persistence
          logit(phi[k,t]) <-  intercept.phi[k] + 
                                     beta.phi.prec[k]*precipitation[t]+
                                     beta.phi.temp[k]*temperature[t]
                                              
    }
   }
                 
    # occupancy dynamics
    for (k in 1:ntaxa) {
     
      for (g in 1:ngen) {
       
          z[k,g,1]~dbern(psi1[k]) # occupancy status initialization
    
              for (t in 2:nint){
            
                # model likelihood
                ### modeling dynamics conditional on previous time realized occurrence z
                muZ[k,g,t] <- z[k,g,t-1] *  phi[k,t] + ### if occupied, p of not getting extinct/persist in the next time
                              (1-z[k,g,t-1]) *  gamma[k,t] ###  if not occupied, p of originate in the next time
                
               # realized occurrence
        		   z[k,g,t] ~ dbern(muZ[k,g,t])
            
        }#t
      
       
      
      } #g
  
    }# k
  
    #############################################################
    #                                                           #
    #         Observation process across formations             #
    #                                                           #
    #############################################################
    
    # Priors for detection probability
    ###  detection intercept and coefficients
    #intercept.p ~ dnorm(0,0.001)
    #beta.p.time ~ dnorm(0,0.001)   
    #beta.p.range ~ dnorm(0,0.001) 
    #beta.p.lat ~ dnorm(0,0.001)   
    #beta.p.temp ~ dnorm(0,0.001) 
    
    
    # observation submodel
    #for (g in 1:ngen) {
    # for (t in 1:nint){
    
    #       # observation
    #       # p dependent on the number of formations
    #       logit(p[g,t])<- intercept.p+beta.p.time*time[t]+
    #                                   beta.p.range*range[g]+
    #                                   beta.p.lat*latitude_obs[g]+
    #                                   beta.p.temp*temperature_obs[g]
    
    #       # Specify the binomial observation model conditional on occupancy state
    #       y [g,t] ~ dbin(z[g,t]*p[g,t], nform[t])
    #             
    #             
    #           }
    #   }
      
      
   
    ###  detection intercept
    for (k in 1:ntaxa) {
        
        intercept.p[k] ~ dnorm(0,0.001)
        beta.p.lat[k] ~ dnorm(0,0.001)
        beta.p.range[k] ~ dnorm(0,0.001)
        beta.p.time[k] ~ dnorm(0,0.001)
        beta.p.temp[k] ~ dnorm(0,0.001)
        
    }
     
    # observation submodel
    for (n in 1:nobs) { ## loop over observations 
    
        # p independent on the number of formations
        logit(p[n])<- intercept.p[taxon[n]]+
                        beta.p.lat[taxon[n]]*lat_obs[n]+
                        beta.p.range[taxon[n]]*range[n]+
                        beta.p.time[taxon[n]]*time[n]+
                        beta.p.temp[taxon[n]]*temp_obs[n]
          
          
        # observation
        # Specify the binomial observation model conditional on occupancy state
        y[n] ~ dbin(z[taxon[n],genus[n],stage[n]]*p[n], nform[n])
                  
       }     
   
      
      
      
    # derived parameters
    for (k in 1:ntaxa) {
    
      for (t in 1:nint){
        SRexp[k,t] <- sum (z[k,,t])
      }
    }
    
    # mean value of P across genus
    #for (t in 1:nint){
    #    mean.p[t] <- mean (p[stage[n]])
    #  }
    
        
   # descriptors of change
   #for (t in 2:nint) {  
   #  
   #   # propcH[t] <-(sum(z[,t])-sum(z[,t-1]))/sum(z[,t-1]) ### turnover (proportional gain or loss)
   #    RER[t] <- (1-phi[t])/gamma[t] ## relative extinction rate (μ/λ; Rabosky 2018) of each time
   #    R0[t] <- (1-phi[t])-gamma[t]  ## net diversification rate (r= μ - λ; Rabosky 2018) of each time
   #    
   # }
    
    
    }## end of the model
    
    
